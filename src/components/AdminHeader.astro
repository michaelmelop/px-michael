---
interface Props {
  title: string;
  currentPage?: string;
}

const { title, currentPage = "dashboard" } = Astro.props;

const breadcrumbs = {
  dashboard: [{ name: 'Dashboard', href: '/admin/dashboard' }],
  users: [{ name: 'Dashboard', href: '/admin/dashboard' }, { name: 'Usuarios', href: '/admin/users' }],
  products: [{ name: 'Dashboard', href: '/admin/dashboard' }, { name: 'Productos', href: '/admin/products' }],
  reports: [{ name: 'Dashboard', href: '/admin/dashboard' }, { name: 'Reportes', href: '/admin/reports' }],
  settings: [{ name: 'Dashboard', href: '/admin/dashboard' }, { name: 'Configuraci√≥n', href: '/admin/settings' }],
  profile: [{ name: 'Dashboard', href: '/admin/dashboard' }, { name: 'Perfil', href: '/admin/profile' }]
};

const currentBreadcrumbs = breadcrumbs[currentPage] || breadcrumbs.dashboard;
---

<header class="admin-header">
  <div class="header-left">
    <button class="mobile-menu-btn" id="mobile-menu-btn">
      <span class="hamburger-icon"></span>
    </button>
    <div class="breadcrumbs">
      {currentBreadcrumbs.map((crumb, index) => (
        <span class="breadcrumb-item">
          {index > 0 && <span class="breadcrumb-separator">‚Ä∫</span>}
          {index === currentBreadcrumbs.length - 1 ? (
            <span class="breadcrumb-current">{crumb.name}</span>
          ) : (
            <a href={crumb.href} class="breadcrumb-link">{crumb.name}</a>
          )}
        </span>
      ))}
    </div>
  </div>

  <div class="header-right">
    <div class="header-actions">
      <button class="notification-btn" title="Notificaciones">
        <span class="notification-icon">üîî</span>
        <span class="notification-badge">3</span>
      </button>
      <div class="user-menu">
        <button class="user-btn" id="user-menu-btn">
          <span class="user-avatar">üë§</span>
          <span class="user-name">Admin</span>
          <span class="user-arrow">‚ñº</span>
        </button>
        <div class="user-dropdown" id="user-dropdown">
          <a href="/admin/profile" class="dropdown-item">
            <span class="dropdown-icon">üë§</span>
            Mi Perfil
          </a>
          <a href="/admin/settings" class="dropdown-item">
            <span class="dropdown-icon">‚öôÔ∏è</span>
            Configuraci√≥n
          </a>
          <hr class="dropdown-divider">
          <a href="/" class="dropdown-item logout">
            <span class="dropdown-icon">üö™</span>
            Cerrar Sesi√≥n
          </a>
        </div>
      </div>
    </div>
  </div>
</header>

<style>
  .admin-header {
    background-color: var(--color-surface);
    border-bottom: 1px solid var(--color-border);
    padding: 1rem 2rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    position: sticky;
    top: 0;
    z-index: 10;
    box-shadow: var(--shadow-sm);
  }

  .header-left {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .mobile-menu-btn {
    display: none;
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    border-radius: var(--border-radius);
    transition: background-color 0.2s ease;
  }

  .mobile-menu-btn:hover {
    background-color: var(--color-background);
  }

  .hamburger-icon {
    display: block;
    width: 20px;
    height: 2px;
    background-color: var(--color-text);
    position: relative;
  }

  .hamburger-icon::before,
  .hamburger-icon::after {
    content: '';
    display: block;
    width: 20px;
    height: 2px;
    background-color: var(--color-text);
    position: absolute;
    transition: all 0.3s ease;
  }

  .hamburger-icon::before {
    top: -6px;
  }

  .hamburger-icon::after {
    top: 6px;
  }

  .breadcrumbs {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
  }

  .breadcrumb-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .breadcrumb-separator {
    color: var(--color-text-muted);
  }

  .breadcrumb-link {
    color: var(--color-text-secondary);
    text-decoration: none;
    transition: color 0.2s ease;
  }

  .breadcrumb-link:hover {
    color: var(--color-primary);
  }

  .breadcrumb-current {
    color: var(--color-text);
    font-weight: 500;
  }

  .header-right {
    display: flex;
    align-items: center;
  }

  .header-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .notification-btn {
    position: relative;
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    border-radius: var(--border-radius);
    transition: background-color 0.2s ease;
  }

  .notification-btn:hover {
    background-color: var(--color-background);
  }

  .notification-icon {
    font-size: 1.2rem;
  }

  .notification-badge {
    position: absolute;
    top: 0;
    right: 0;
    background-color: var(--color-error);
    color: white;
    font-size: 0.75rem;
    padding: 0.125rem 0.375rem;
    border-radius: 0.75rem;
    min-width: 1.25rem;
    text-align: center;
    line-height: 1;
  }

  .user-menu {
    position: relative;
  }

  .user-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: none;
    padding: 0.5rem;
    cursor: pointer;
    border-radius: var(--border-radius);
    transition: background-color 0.2s ease;
  }

  .user-btn:hover {
    background-color: var(--color-background);
  }

  .user-avatar {
    font-size: 1.2rem;
  }

  .user-name {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--color-text);
  }

  .user-arrow {
    font-size: 0.75rem;
    color: var(--color-text-muted);
    transition: transform 0.2s ease;
  }

  .user-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    margin-top: 0.5rem;
    background-color: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-lg);
    min-width: 200px;
    z-index: 50;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.2s ease;
  }

  .user-dropdown.show {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    color: var(--color-text);
    text-decoration: none;
    font-size: 0.875rem;
    transition: background-color 0.2s ease;
  }

  .dropdown-item:hover {
    background-color: var(--color-background);
  }

  .dropdown-item.logout {
    color: var(--color-error);
  }

  .dropdown-icon {
    font-size: 1rem;
  }

  .dropdown-divider {
    margin: 0.5rem 0;
    border: none;
    border-top: 1px solid var(--color-border);
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .admin-header {
      padding: 1rem;
      margin-left: 0;
    }

    .mobile-menu-btn {
      display: block;
    }

    .breadcrumbs {
      display: none;
    }

    .user-name {
      display: none;
    }

    .header-actions {
      gap: 0.5rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const userMenuBtn = document.getElementById('user-menu-btn');
    const userDropdown = document.getElementById('user-dropdown');
    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    
    // User menu toggle
    if (userMenuBtn && userDropdown) {
      userMenuBtn.addEventListener('click', function(e) {
        e.stopPropagation();
        userDropdown.classList.toggle('show');
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', function() {
        userDropdown.classList.remove('show');
      });
    }

    // Mobile menu toggle
    if (mobileMenuBtn) {
      mobileMenuBtn.addEventListener('click', function() {
        const sidebar = document.querySelector('.admin-sidebar');
        if (sidebar) {
          sidebar.classList.toggle('open');
          
          // Create overlay for mobile
          let overlay = document.querySelector('.sidebar-overlay');
          if (!overlay) {
            overlay = document.createElement('div');
            overlay.className = 'sidebar-overlay';
            document.body.appendChild(overlay);
            
            overlay.addEventListener('click', function() {
              sidebar.classList.remove('open');
              overlay.classList.remove('show');
            });
          }
          
          overlay.classList.toggle('show');
        }
      });
    }
  });
</script>